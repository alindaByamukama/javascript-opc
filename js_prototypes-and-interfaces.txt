// what is a prototype?

~ an object that exists on every function in JS.
~ a functions prototype is the object instance that will become
the prototype for all objects created using this fucntion as a constructor.
~ an objects prototype is the object instance from which the object is inherited.

(function() {
  
  let myFunction = function() { }

  display(myFunction.prototype);

  let person = {firstName: 'firsty'};

  display(person.prototype);

  display(person.__proto__);

})();

(function() {

  function Person(firstName, lastName) {
    this.firstName = firstName;
    this.lastName = lastName;
  }

  Person.prototype.age = 29;

  display(Person.prototype);

  let jim = new Person('Itsami', 'Marioh');
  let sofya = new Person('new', 'person');
  sofya.__proto__.age = 19;

  display(jim.__proto__);
  display(sofya.__proto__);
  display(Person.prototype === jim.__proto__);
})();

/*
the objects instance, that is the functions prototype, 
becomes the prototype for all obejcts created from that prototype...!?
*/

// instance versus prototype properties
// a graphical overview of prototypes

function Person(firstName, lastName) {
  this.firstName = firstName;
  this.lastName = lastName;
  prototype: 
  /*
   the function's prototype is the object instance that will 
   become the prototype for all objects created using this function
  */
}

Person.prototype.age = 29;

let jim = new Person('Jim', 'Cooper');
let sofia = new Person('Sofia', 'Cooper');

/*
  (jim)
  __proto__: Person
  firstName: 'Jim'
  lastName: 'Cooper'

  (sofia)
  __proto__: Person
  firstName: 'Sofia'
  lastName: 'Cooper'

  these point to (Person)
  age: 29
*/

Person.prototype = {age: 18};

let kris = new Person('kris', 'Konner');

/*
  (kris)
  __proto__: Person
  firstName: Kris
  lastName: Konner

  this points to (Person)
  age: 18
*/

// multiple levels of inheritance

display(jim.__proto__); // Person {age: 29}
display(jim.__proto__.__proto__); // Object { }
display(jim.__proto__.__proto__.__proto__); // null = end of the chain

/*
  By default all objects in JS inherit from Object
  and object has no prototype
*/

// creating your own prototypal inheritance chains

(function() {

  function Person(firstName, lastName, age) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.age = age;
    Object.defineProperty(this, 'fullName', {
      get: function() {
        return this.firstName + ' ' + this.lastName
      },
      enumerable: true
    });
  }

  function Student(firstName, lastName, age) {
    Person.call(this, firstName, lastName, age);
    this._enrolledCourses = [];

    this.enroll = function(courseId) {
      this._enrolledCourses.push(courseId);
    };

    this.getCourses = function() {
      return this.fullName + "'s enrolled courses are: " +
      this._enrolledCourses.join(', ');
    };
  }
// create a prototype inheritance chain
Student.prototype = Object.create(Person.prototype);
Student.prototype.constructor = Student;

// create a new student
let sofya = new Student('Sofya', 'Carter', 34);

sofya.enroll('AH101');
sofya.enroll('AD205');
sofya.enroll('CM301');

display(sofya.getCourses());

// display(sofya);
// display(sofya.__proto__); // Student { }
// display(sofya.__proto__.__proto__); // Person { }

})();

